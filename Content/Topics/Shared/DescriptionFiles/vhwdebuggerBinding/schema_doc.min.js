
if (window.self !== window.top)
{
    console.log("help is displayed from html help framework")
    document.write('<script src="../../../../../ProductInfo.js"></script>') //find better file to include
}
else
{
    console.log("help is displayed standalone")
}

function setAnchorAndToggle(elementId) {
   elem = document.getElementById(elementId);
   button = document.getElementById("button" + elementId);
   if(elem)
   {
       if(elem.classList.contains("show"))
       {
           elem.classList.remove("show");
       }
       else
       {
           elem.classList.add("show");
       }
   }

    if (button) {
        if (button.classList.contains("show")) {
            button.classList.remove("show");
        }
        else {
            button.classList.add("show");
        }
    }
    setAnchor('#' + elementId)
}


function setAnchor(anchorLinkDestination) {

    if (window.self !== window.top) {
        // inside of the help page framework we can't set the anchor (since we are in an iframe)
        // we can build the current url with updated anchor and open it.
        // since it is the same page no actual reload will happen (at least on firefox and chrome) and the anchor is set
        if(typeof helpSystemName != "undefined")
        {
            anchor = "#Topics" + window.location.href.split("/Topics")[1].split("#")[0] + anchorLinkDestination
            window.top.location.href = "../../../../../" + helpSystemName + anchor
        }
        else
        {
            console.log("setting anchors is disabled")
        }
    } else {
        // Set anchor link without reloading
        history.pushState({}, '', anchorLinkDestination);
    }
}

function anchorOnLoad() {
    // Added to onload on body, checks if there is an anchor link and if so, expand
    let t = window.location.hash.split("#")
    if(t.length > 1 && t[t.length-1].length> 0 )
    {
        let target = t[t.length-1]
        // we need to fix the madcap link issue
        // -> remove anchor if it starts with #Topics/
        if(t[1].startsWith("Topics/") && t.length == 2)
        {
            target = "before_title"
        }
        anchorLink(target)
        setAnchor("#" + target)
    }
}

function anchorLink(linkTarget) {
    const target = $( "#" + linkTarget );
    // Find the targeted element to expand and all its parents that can be expanded
    target.parents().addBack().filter(".collapse:not(.show), .tab-pane, [role='tab']").each(
        function(index) {
            if($( this ).hasClass("collapse")) {
                // broken in madcap wrapper:
                // $( this ).collapse("show");
                // -> do this manually
                $( this ).addClass("show");
            } else if ($( this ).hasClass("tab-pane")) {
                //further code to fix the issue with madcap wrapper
                $( this ).parent().children().each(
                    //hide all tab content
                    function(index2) {
                        if ($( this ).hasClass("show")) {
                            $( this ).removeClass("show");
                        }
                        if ($( this ).hasClass("active")) {
                            $( this ).removeClass("active");
                        }
                    }
                )

                // We have the pane and not the the tab itself, find the tab
                const tabToShow = $( "a[href='#" + $( this ).attr("id") + "']" );
                if (tabToShow) {
                    // broken in madcap wrapper:
                    // tabToShow.tab("show");
                    // -> do this manually
                    tabToShow.parent().parent().children().each(
                        //disable all tab headers
                        function(index2) {
                            $( this ).children().each(function(index3) {
                                if ($( this ).hasClass("show")) {
                                    $( this ).removeClass("show");
                                }
                                if ($( this ).hasClass("active")) {
                                    $( this ).removeClass("active");
                                }
                            })
                        }
                    )
                    //enable this tab header
                    tabToShow.addClass("show");
                    tabToShow.addClass("active");
                }
                //enable this tab content
                $( this ).addClass("show");
                $( this ).addClass("active");
            } else if ($( this ).attr("role") === "tab") {
                // The tab is not a parent of underlying elements, the tab pane is
                // However, it can still be linked directly
                $( this ).tab("show");
            }
        }
    );

    // Wait a little so the user has time to see the page scroll
    // Or maybe it is to be sure everything is expanded before scrolling and I was not able to bind to the bootstrap
    // events in a way that works all the time, we may never know
    setTimeout(function() {
        let targetElement = document.getElementById(linkTarget);
        if (targetElement) {
            targetElement.scrollIntoView({ block: "center", behavior:"smooth" });
        }
    }, 10);
}

$(document).on('click', 'a[href^="#"]', function(event) {
    event.preventDefault();
    history.pushState({}, '', this.href);
  });


  function MyCollapseAll() {
    for (const elemId of collapsable_div_ids)
    {
        elem = document.getElementById(elemId)
        if(elem)
        {
            elem.classList.remove("show");
            //switch - to + in card header buttons
            button = document.querySelector("#heading" + elemId + " h2 button")
            button.classList.remove("show")     
        }
    }
  }
  function MyExpandAll() {
    for (const elemId of collapsable_div_ids)
    {
        elem = document.getElementById(elemId)
        if(elem)
        {
            elem.classList.add("show");
            //switch + to - in card header buttons
            button = document.querySelector("#heading" + elemId + " h2 button")
            button.classList.add("show")     
        }
    }
  }